<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[HelloCode]]></title><description><![CDATA[A blog recording the good life.]]></description><link>https://xianchenxc.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 06 Jan 2024 10:24:12 GMT</lastBuildDate><item><title><![CDATA[单词本]]></title><description><![CDATA[optimal 最好的，最理想的]]></description><link>https://xianchenxc.github.io/english/words-book/</link><guid isPermaLink="false">https://xianchenxc.github.io/english/words-book/</guid><pubDate>Sat, 06 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;optimal 最好的，最理想的&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dynamic Programming]]></title><description><![CDATA[目标： 了解什么是动态规划 理清动态规划的核心原理 常用的动态规划的应用场景 What is Dynamic Programming? Dynamic Programming is a computer programming technique where an…]]></description><link>https://xianchenxc.github.io/re-learning-series/algorithms/dynamic-programming/</link><guid isPermaLink="false">https://xianchenxc.github.io/re-learning-series/algorithms/dynamic-programming/</guid><pubDate>Sat, 06 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解什么是动态规划&lt;/li&gt;
&lt;li&gt;理清动态规划的核心原理&lt;/li&gt;
&lt;li&gt;常用的动态规划的应用场景&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What is Dynamic Programming?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Dynamic Programming is a computer programming technique where an algorithm probleam is first broken down into sub-problems, the results are saved, and then the sub-problems are optimized to find the overall solution - which usually has to do with finding the maximum and minimum range of the algorithmic query.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;How does Dynamic Programming work?&lt;/h2&gt;
&lt;p&gt;Dynamic Programming works by break down complex problem into &lt;strong&gt;simpler subproblems&lt;/strong&gt;. Then, finding optimal solutions to these subproblems. &lt;strong&gt;Memorization&lt;/strong&gt; is a method that saves the outcomes of these processes so that the corresponding answers do not need to computed when thery are later needed.&lt;/p&gt;
&lt;p&gt;动态规划的核心思想是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拆分子问题：将复杂的问题拆成相对简单的子问题&lt;/li&gt;
&lt;li&gt;缓存：子问题会存在重叠部分，通过缓存，减少重复计算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态规划可以通过以下两种方式实现：&lt;/p&gt;
&lt;h3&gt;Top-down approach&lt;/h3&gt;
&lt;p&gt;自顶而下&lt;/p&gt;
&lt;h3&gt;Bottom-up approach&lt;/h3&gt;
&lt;p&gt;自底而上&lt;/p&gt;
&lt;h2&gt;Applications&lt;/h2&gt;
&lt;h3&gt;接雨水&lt;/h3&gt;
&lt;p&gt;问题链接：&lt;a href=&quot;https://leetcode.cn/problems/trapping-rain-water/description/&quot;&gt;https://leetcode.cn/problems/trapping-rain-water/description/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单分析：假设第 i 根柱子能接 rain[i] 雨水，那么一共能接 rain[0] + rain[1] + … + rain[len - 1]，问题的关键在于如何计算第 i 根柱子能接多少雨水？第 i 根柱子能接多少雨水，取决于左/右侧最高的柱子高度的较小值 - 第 i 根柱子的高度，即:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;rain[i] = Math.min(maxLeft[i] - maxRight[i]) - height[i]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;问题转变为：计算第 i 根柱子左右两边的最大高度，最简单的方法，遍历 [0, i) 和 (i, len)，时间复杂度为 O(n)，整体时间复杂度 O(n^2)&lt;/p&gt;
&lt;p&gt;我们注意到求 maxLeft[i] 和 maxLeft[i - 1]，其实重复遍历计算了 [0, i - 1]，这是没有必要的，当知道 maxLeft[i - 1] 时，只需要简单比较 maxLeft[i - 1] 和 height[i] 即可：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;maxLeft[i] = Math.max(maxLeft[i - 1], height[i - 1])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，计算 maxLeft[i] 的时间复杂度从 O(n) 变成 O(1)，整体复杂度变为 O(n)。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[贪心算法]]></title><description><![CDATA[Greedy Algorithm Introduction 贪心算法是在每一步选择中都选择当前状态下最好或最优的选择，从而希望导致结果时最好或最优的算法。 Props and Cons 优点：简单，易于实现，运行快 缺点：算法经常不能提供全局最优解。 When to Use…]]></description><link>https://xianchenxc.github.io/re-learning-series/algorithms/greedy-algorithm/</link><guid isPermaLink="false">https://xianchenxc.github.io/re-learning-series/algorithms/greedy-algorithm/</guid><pubDate>Sat, 06 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h1&gt;Greedy Algorithm&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;贪心算法是在每一步选择中都选择&lt;strong&gt;当前状态&lt;/strong&gt;下最好或最优的选择，从而希望导致结果时最好或最优的算法。&lt;/p&gt;
&lt;h2&gt;Props and Cons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：简单，易于实现，运行快&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缺点：算法经常不能提供全局最优解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;When to Use？&lt;/h2&gt;
&lt;p&gt;用贪心算法解决的问题需要满足两个特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;贪心选择：问题的整体最优解可以通过一系列局部最优的选择来达到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最优子结构：问题的最优解包含其子问题的最优解&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Applications&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=poWB2UCuozA&quot;&gt;Activity Selection Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Huffman Coding&lt;/li&gt;
&lt;li&gt;Job Sequencing Problem&lt;/li&gt;
&lt;li&gt;Fractional Knapsack Problem&lt;/li&gt;
&lt;li&gt;Prim’s Minimum Spanning Tree&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[LEB128 编码格式]]></title><description><![CDATA[LEB 128（Little Endian Base 128）是一种变长的整数压缩编码形式。它被应用于 DWARF debug file format，wasm 的整数字面量的二进制编码，以及 quickjs 的字节码中。 编码 每个 LEB128 编码值均由 1-…]]></description><link>https://xianchenxc.github.io/quickjs/leb128/</link><guid isPermaLink="false">https://xianchenxc.github.io/quickjs/leb128/</guid><pubDate>Tue, 21 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;LEB 128（Little Endian Base 128）是一种变长的整数压缩编码形式。它被应用于 &lt;a href=&quot;https://en.wikipedia.org/wiki/DWARF&quot;&gt;DWARF&lt;/a&gt; debug file format，wasm 的整数字面量的二进制编码，以及 quickjs 的字节码中。&lt;/p&gt;
&lt;h2&gt;编码&lt;/h2&gt;
&lt;table border=&quot;1&quot;&gt;
  &lt;tr &gt;
    &lt;td colspan=&quot;16&quot;&gt;双字节 LEB128 值的按位图&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&quot;8&quot;&gt;第一个字节&lt;/td&gt;
    &lt;td colspan=&quot;8&quot;&gt;第二个字节&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;bit6&lt;/td&gt;
    &lt;td&gt;bit5&lt;/td&gt;
    &lt;td&gt;bit4&lt;/td&gt;
    &lt;td&gt;bit3&lt;/td&gt;
    &lt;td&gt;bit2&lt;/td&gt;
    &lt;td&gt;bit1&lt;/td&gt;
    &lt;td&gt;bit0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;bit13&lt;/td&gt;
    &lt;td&gt;bit12&lt;/td&gt;
    &lt;td&gt;bit11&lt;/td&gt;
    &lt;td&gt;bit10&lt;/td&gt;
    &lt;td&gt;bit9&lt;/td&gt;
    &lt;td&gt;bit8&lt;/td&gt;
    &lt;td&gt;bit7&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;每个 LEB128 编码值均由 1-5 个字节组成，共同表示一个 32 位的值。每个字节最高位是信息位，1 表示后续还有字节，0 表示结束；每个字节的剩余 7 位均为有效负荷，即第一个字节中有 7 个最低有效位，第二个字节中也是 7 个，依此类推。&lt;/p&gt;
&lt;p&gt;LEB128 有两种变体，分为有符号 leb128 和无符号 leb128 两种，两者编码和解码有所差别。&lt;/p&gt;
&lt;h3&gt;无符号 leb128&lt;/h3&gt;
&lt;p&gt;用 uleb128 编码，主要分为五步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;二进制表示&lt;/li&gt;
&lt;li&gt;因为信息位是 7 的倍数，所以左侧补 0&lt;/li&gt;
&lt;li&gt;每 7 位分一组&lt;/li&gt;
&lt;li&gt;每组高位加标志位&lt;/li&gt;
&lt;li&gt;转为小端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以 624485 为例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MSB ------------------ LSB
      10011000011101100101  step 1
     010011000011101100101  step 2
 0100110  0001110  1100101  step 3
00100110 10001110 11100101  step 4
    0x26     0x8E     0xE5  

→ 0xE5 0x8E 0x26            step 5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;有符号 leb128&lt;/h3&gt;
&lt;p&gt;和 uleb128 的区别在于，在 step 2 和 step 3 之间，增加计算补码的过程：&lt;/p&gt;
&lt;p&gt;以 -123456 为例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MSB ------------------ LSB
         11110001001000000  123456 二进制表示
     000011110001001000000  左侧补 0，使得 bit 位是 7 的倍数
     111100001110110111111  （补码 step1）按位取反
     111100001110111000000  （补码 step2）+1
 1111000  0111011  1000000  每 7 位分一组
01111000 10111011 11000000  每组高位加标志位
    0x78     0xBB     0xC0  In hexadecimal

→ 0xC0 0xBB 0x78            转为小端表示&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;解码&lt;/h2&gt;
&lt;p&gt;解码其实就是编码的逆过程。&lt;/p&gt;
&lt;h2&gt;代码&lt;/h2&gt;
&lt;p&gt;代码逻辑是取自 &lt;code class=&quot;language-text&quot;&gt;quickjs&lt;/code&gt;，做了一些改动。&lt;/p&gt;
&lt;h3&gt;uleb128 encode&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;encode_leb128&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x7f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        v &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            buf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;pos&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            buf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;pos&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;uleb128 decode&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_leb128&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pval&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;ptr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; buf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    v &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;ptr&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        v &lt;span class=&quot;token operator&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x7f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ptr &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; buf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[双指针]]></title><description><![CDATA[双指针（two-pointers…]]></description><link>https://xianchenxc.github.io/re-learning-series/algorithms/two-pointers-technique/</link><guid isPermaLink="false">https://xianchenxc.github.io/re-learning-series/algorithms/two-pointers-technique/</guid><pubDate>Mon, 20 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;双指针（two-pointers) 指的是在迭代对象的过程中，使用两个相同方向或者相反方向的指针进行扫描。在处理&lt;strong&gt;有序&lt;/strong&gt;数组搜索问题中，简单且高效。&lt;/p&gt;
&lt;h2&gt;快慢指针&lt;/h2&gt;
&lt;h2&gt;对撞指针&lt;/h2&gt;
&lt;p&gt;定义两个指针：左指针 &lt;code class=&quot;language-text&quot;&gt;left&lt;/code&gt; 和右指针 &lt;code class=&quot;language-text&quot;&gt;right&lt;/code&gt;，且使左指针指向数组左侧，右指针指向数组右侧。在迭代过程中，左指针不断右移，右指针不断左移，直到发生&lt;strong&gt;碰撞&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 伪代码, 数组长度为 arraySize
int left = 0;
int right = arraySize;

while(left &amp;lt;= right) {
  if (condition) {
    left++;
  }

  if (another condition) {
    right--;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;有序数组的平方&lt;/h3&gt;
&lt;p&gt;给你一个按&lt;strong&gt;非递减顺序&lt;/strong&gt;排序的整数数组 nums，返回&lt;strong&gt;每个数字的平方&lt;/strong&gt;组成的新数组，要求也按&lt;strong&gt;非递减顺序&lt;/strong&gt;排序。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/squares-of-a-sorted-array/&quot;&gt;有序数组的平方&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解决思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关键字&lt;strong&gt;非递减顺序&lt;/strong&gt;，说明数组是有序的，可以使用双指针；&lt;/li&gt;
&lt;li&gt;假设存在一个 k，使得：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;i &amp;#x3C; k, nums[i] &amp;#x3C; 0&lt;/li&gt;
&lt;li&gt;k &amp;#x3C; i, 0 &amp;#x3C; nums[i]&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;平方后，可得：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;i &amp;#x3C; k, nums 顺序性发生变化，平方后的数组为降序，↓&lt;/li&gt;
&lt;li&gt;k &amp;#x3C; i, nums 顺序性不变，升序 ↑。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;令 left = 0, right = nums.length - 1，那么最大元素为 max(left, right)：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;若 left 更大，left 为剩余最大元素，left 指针所指向的元素填入 ans 数组，同时 left 指针右移&lt;/li&gt;
&lt;li&gt;若 right 更大，right 为剩余中最大元素，right 指针所指向的元素填入 ans 数组，同时 right 指针左移&lt;/li&gt;
&lt;li&gt;不断迭代，直至左右指针发生碰撞。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sortedSquares&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ans &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// 结构数组&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      ans&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      right&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      ans&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      left&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ans&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[线性表]]></title><description><![CDATA[线性表（Linear List） 线性表是 n (n ≥ 0) 个数据元素的一个有限的序列。记为 其中，L 是表名，ai 是表中数据元素，是不可再分割的原子数据，亦称为结点或表项。n 为表的长度，若 n = 0 叫做空表。第一个表项为表头，最后一个表项为表尾。 ADT]]></description><link>https://xianchenxc.github.io/re-learning-series/data-structure/linear-list/</link><guid isPermaLink="false">https://xianchenxc.github.io/re-learning-series/data-structure/linear-list/</guid><pubDate>Wed, 15 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;线性表（Linear List）&lt;/h2&gt;
&lt;p&gt;线性表是 n (n ≥ 0) 个数据元素的一个&lt;strong&gt;有限&lt;/strong&gt;的序列。记为&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; L = (a1, a2, ... an)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，L 是表名，ai 是表中数据元素，是不可再分割的原子数据，亦称为结点或表项。n 为表的长度，若 n = 0 叫做空表。第一个表项为表头，最后一个表项为表尾。&lt;/p&gt;
&lt;h3&gt;ADT&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ADT LinearList is
Objects: n(≥ 0) 个原子表项的一个有限序列。每个表项的数据类型为 T。
Function:
  create()
  int Length()
  int search(T&amp;amp; x)
  int Locate(int i)             定位函数：返回第 i 个表项在表中位置
  bool getData(int i, T&amp;amp; x)
  void setData(int i, T&amp;amp; x)
  bool Insert(int i, T&amp;amp; x)
  bool Remove(int i, T&amp;amp; x)
  bool IsEmpty()
  bool IsFull()
  void CopyList(List&amp;lt;T&gt;&amp;amp; L)
  void Sort()
end LinearList&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[在 windows 上配置 c/c++ 开发环境]]></title><description><![CDATA[作为一个前端开发工程师，接触最多的编辑器就是 vscode，所以在我需要搭建c/c++开发环境时，第一选择就是 vscode，差点没把我劝退了🙃。 在进入到 vscode 配置之前，我们需要了解几个工具，以及工具的作用。只有清楚这些工具的作用，才能更好的理解 vscode…]]></description><link>https://xianchenxc.github.io/re-learning-series/tools/how-to-configure-cpp-debugger-with-vscode/</link><guid isPermaLink="false">https://xianchenxc.github.io/re-learning-series/tools/how-to-configure-cpp-debugger-with-vscode/</guid><pubDate>Sat, 11 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;作为一个前端开发工程师，接触最多的编辑器就是 vscode，所以在我需要搭建c/c++开发环境时，第一选择就是 vscode，差点没把我劝退了🙃。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; std&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello C++&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在进入到 vscode 配置之前，我们需要了解几个工具，以及工具的作用。只有清楚这些工具的作用，才能更好的理解 vscode 的配置。&lt;/p&gt;
&lt;h2&gt;what hell is g++, gdb, make and cmake?&lt;/h2&gt;
&lt;h3&gt;g++&lt;/h3&gt;
&lt;p&gt;与 JavaScript 这类的脚本语言不同，cpp 代码需要先编译，再执行。g++ 就是 C++ 的编译器，它能给把代码字符串编译成字节码，在 windows 编译结果就是 exe 文件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;g++ test.cpp -o test.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多文件编译的话，也很简单：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;g++ test.cpp test2.cpp -o test.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;gdb&lt;/h3&gt;
&lt;p&gt;在前端开发过程中，我们经常会用到浏览器的 debugger 工具进行断点调试。gdb 就是用来进行 cpp 代码调试的。为了更好的调试体验，我们需要在编译文件中增加一些信息，比如代码是行列信息，这就需要通过参数 &lt;code class=&quot;language-text&quot;&gt;-g&lt;/code&gt; 告诉编译器：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;g++ -g test.cpp -o test.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再通过以下命令进行 cpp 调试：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;gdb test.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;make &amp;#x26; cmake&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gcc/g++&lt;/code&gt; 是编译工具，而 &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt; 是构建工具，有点类似于 &lt;code class=&quot;language-text&quot;&gt;gulp&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;babel&lt;/code&gt; 的区别。&lt;/p&gt;
&lt;p&gt;构建是一个非常复杂的过程，哪些文件需要先编译，哪些需要后编译等，开发者需要通过 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 去编写构建规则去指示 &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt; 工具。&lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 设计一整套语法，支持规则的编写。手写 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 是一件麻烦的事情，不同的平台可能需要编写不同的 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 工具。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 的出现就是为了简化这一过程，&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 能给帮你生成 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 文件，你没看错，&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 不是替代 &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt;，而且为了更简便使用 &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么，&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 是如何生成 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 文件的呢？答案是，你需要配置 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt;。&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 会根据你手写的 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt; 生成 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt;， 所以 &lt;code class=&quot;language-text&quot;&gt;cmake = make maker&lt;/code&gt;，😃。一个最简单的 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt; 差不多是这样：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cmake&quot;&gt;&lt;pre class=&quot;language-cmake&quot;&gt;&lt;code class=&quot;language-cmake&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test test.cpp test1.cpp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;vscode 配置&lt;/h2&gt;
&lt;h3&gt;配置编译构建任务 task.json&lt;/h3&gt;
&lt;p&gt;我们以 &lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 为示例，用 &lt;code class=&quot;language-text&quot;&gt;g++&lt;/code&gt;也是同理。&lt;/p&gt;
&lt;h4&gt;准备阶段&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;首先，在项目根目录下，新建文件 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;其次，配置 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt;;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cmake&quot;&gt;&lt;pre class=&quot;language-cmake&quot;&gt;&lt;code class=&quot;language-cmake&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test test.cpp test1.cpp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;最后，在项目根目录下，创建 &lt;code class=&quot;language-text&quot;&gt;build&lt;/code&gt; 目录;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;正式构建&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;进入到 &lt;code class=&quot;language-text&quot;&gt;build&lt;/code&gt; 目录下，执行以下命令生成 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;cd build
cmake ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;执行 make 命令生成可执行文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;mingw32-make.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;让 vscode 替你完成步骤 1 和 2，配置 &lt;code class=&quot;language-text&quot;&gt;task.json&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;options&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${workspaceFolder}/build&quot;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;tasks&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cmake&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cmake&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
				&lt;span class=&quot;token string&quot;&gt;&quot;..&quot;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mingw32-make.exe&quot;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;dependsOn&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
				&lt;span class=&quot;token string&quot;&gt;&quot;cmake&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;token string&quot;&gt;&quot;make&quot;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;配置调试 launch.json&lt;/h3&gt;
&lt;p&gt;配置参数比较多，大多数是 vscode 自动生成的，我们需要关注以下几个参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;program&lt;/td&gt;
&lt;td&gt;调试程序，因为这里通过 cmake 构建的，构建产物在 build 目录下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;miDebuggerPath&lt;/td&gt;
&lt;td&gt;degugger 调试工具路径，这里就是 gdb 的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preLaunchTask&lt;/td&gt;
&lt;td&gt;调试前需要做的任务，这里配置的 &lt;code class=&quot;language-text&quot;&gt;build&lt;/code&gt; 就是对应 &lt;code class=&quot;language-text&quot;&gt;task.json&lt;/code&gt; 的 &lt;code class=&quot;language-text&quot;&gt;tasks[2]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;(gdb) 启动&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cppdbg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${fileDirname}\\build\\example.exe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;stopAtEntry&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;environment&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;externalConsole&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;MIMode&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gdb&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;miDebuggerPath&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C:\\Program Files (x86)\\mingw-w64\\mingw32\\bin\\gdb.exe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;setupCommands&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;为 gdb 启用整齐打印&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-enable-pretty-printing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;ignoreFailures&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;preLaunchTask&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;build&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，vscode 的 c/c++ 的开发/调试环境就配置好了，又可以愉快的断点调试了 🥂。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[重学系列-意图]]></title><description><![CDATA[我大学主修电子信息工程专业，虽然必修课也修习过 C、C++，甚至选修过 Java，但是刚毕业时对于编程一知半解，所以选择成为通信软件解决方案（BOSS…]]></description><link>https://xianchenxc.github.io/re-learning-series/intention/</link><guid isPermaLink="false">https://xianchenxc.github.io/re-learning-series/intention/</guid><pubDate>Sat, 04 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;我大学主修电子信息工程专业，虽然必修课也修习过 C、C++，甚至选修过 Java，但是刚毕业时对于编程一知半解，所以选择成为通信软件解决方案（BOSS）的运维工程师。&lt;/p&gt;
&lt;p&gt;后因为工作原因，经常接触数据库脚本开发，对于编程萌生了一些兴趣，不可否认也是因为轻度社恐（觉得面对代码比面对“社会人”要轻松很多），所以转行成为一个前端开发工程师，目前就职于一家 toB 的创业公司。&lt;/p&gt;
&lt;p&gt;又过四年有余，开发经验有所积累，公司职位也有所增长，但是总感觉自己技术能力增长缓慢，尤其近 1-2 年更甚。在平常逛的技术社区，关注的技术方向，逐渐发现自己能看懂的越来越少，大多一知半解，比如：React-Native 的架构升级、JS 引擎 QuickJS 和 Hermes 的设计目的、跨端设计与实现、布局算法与优化等等，于是进入到技术焦虑、自我怀疑😑。&lt;/p&gt;
&lt;p&gt;从去年开始，尝试阅读 QuickJS 源码，收获了很多，但也逐渐意识到自身的问题 —— 计算机基础差。数据结构和算法没有系统地学习，操作系统、计算机组成原理、图形学相关几乎两眼一抹黑，编译原理因为当年啃 babel，买了龙书看过一些，但也仅限于此。&lt;/p&gt;
&lt;p&gt;所以，准备【重学】计算机基础，既希望能夯实基础，同时也可以从中获取一些灵感去理解框架设计。&lt;/p&gt;
&lt;p&gt;📝谨以此文字记录一二。&lt;/p&gt;</content:encoded></item></channel></rss>