<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[HelloCode]]></title><description><![CDATA[A blog recording the good life.]]></description><link>https://xianchenxc.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 14 Apr 2025 02:14:33 GMT</lastBuildDate><item><title><![CDATA[No title]]></title><description><![CDATA[—
title: 什么是机器学习
date: 2025-04-13 Machine learning algorithms Supervised learning Unsupervised learning Supervised learning…]]></description><link>https://xianchenxc.github.io/AI/what-is-machine-learning/</link><guid isPermaLink="false">https://xianchenxc.github.io/AI/what-is-machine-learning/</guid><content:encoded>&lt;h2&gt;—
title: 什么是机器学习
date: 2025-04-13&lt;/h2&gt;
&lt;p&gt;Machine learning algorithms&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supervised learning&lt;/li&gt;
&lt;li&gt;Unsupervised learning&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Supervised learning&lt;/h2&gt;
&lt;p&gt;监督学习通过**已知输入和对应输出的数据（即标记数据）**训练模型，使其能够对新的/未见过的数据进行预测。&lt;/p&gt;
&lt;h3&gt;核心概念&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;数据集&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;包含输入特征（features）和对应的标签（labels）。&lt;/p&gt;
&lt;p&gt;例如：预测房价的数据集中，特征可能是房屋面积/位置，标签是房价。&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;训练过程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;模型通过学习输入和输出之间的关系，调整内部参数，尽量减少预测结果与真实标签的误差。&lt;/p&gt;
&lt;p&gt;常用算法包括：线性回归，决策树，支持向量机，神经网络等。&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;类型&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;回归（Regression）：预测&lt;strong&gt;连续值&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;学习算法必须从无限多可能的输出数字中预测数字。例如：预测房价，温度。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分类（Classification）：预测&lt;strong&gt;离散类别&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如：判断邮件是否为垃圾邮件（是/否），识别图片中的物体（猫/狗）。&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;应用场景&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;图像识别（给图片打标签）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自然语言处理（如情感分析）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;金融预测（如信用评分）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;关键点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;需要大量标记数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模型性能依赖数据质量和算法选择&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相比无监督学习，监督学习更像“有老师指导”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Unsupervised learning&lt;/h2&gt;
&lt;p&gt;处理&lt;strong&gt;没有标签&lt;/strong&gt;的数据，目标是从数据中自动发现隐藏的模式，结构或关系。简单来说，就是让机器在“没有答案”的情况下自己摸索数据的规律。&lt;/p&gt;
&lt;h3&gt;核心概念&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;数据集&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只有输入特征（features），没有对应的标签&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;训练过程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;模型通过分析数据的内在特性，找出相似性，群集或分布规律。&lt;/p&gt;
&lt;p&gt;不追求“正确答案”，而是探索数据的组织方式。&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;主要类型&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聚类（Clustering）：将数据分组为相似的集群。例如：根据购买习惯将用户分为“节约型”“奢侈型”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;降维（Dimensionality Reduction）：简化数据，保留重要信息。例如：将高纬数据压缩成 2D 或者 3D 以便可视化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关联规则（Association Rule Learning）：发现数据中的频繁模式。例如：超市发现“买面包的人常买黄油”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;常用算法&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聚类：K-Means, DBSCAN, 层次聚类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;降维：主要分分析（PCA）, t-SNE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他：Apriori 算法（关联规则）, 自编码器（Auto-encoders）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;应用场景&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;客户细分（市场营销）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;图像压缩或特征提取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;推荐系统（发现用户偏好模式）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;异常检测（识别不寻常的数据点）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;关键点&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：无需标记数据，适合探索未知模式，尤其当标签难以获取时&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;挑战：结构难以之间评估（没有“准确答案”），解释性可能较弱&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与监督学习区别：无监督学习像“自学”，没有老师提供答案；监督学习有明确的指导。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Smart Contract Develop]]></title><description><![CDATA[什么是智能合约 智能合约是部署在以太坊某个地址上运行的程序，它由数据和函数组成，可以在收到交易时执行。 pragma 是编译器指令，用来声明编译器版本的。  声明一个名叫 storedData 的无符号整型的状态变量，定义的 set 和 get…]]></description><link>https://xianchenxc.github.io/web3/smart-contracts/</link><guid isPermaLink="false">https://xianchenxc.github.io/web3/smart-contracts/</guid><pubDate>Sat, 14 Dec 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;什么是智能合约&lt;/h2&gt;
&lt;p&gt;智能合约是部署在以太坊某个地址上运行的程序，它由数据和函数组成，可以在收到交易时执行。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;solidity&quot;&gt;&lt;pre class=&quot;language-solidity&quot;&gt;&lt;code class=&quot;language-solidity&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// SPDX-License-Identifier: GPL-3.0&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pragma&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;solidity&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt;&lt;span class=&quot;token version number&quot;&gt;0.4.16&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token version number&quot;&gt;0.9.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SimpleStorage&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;uint&lt;/span&gt; storedData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;uint&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        storedData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;view&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;uint&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; storedData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;pragma 是编译器指令，用来声明编译器版本的。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;uint storedData&lt;/code&gt; 声明一个名叫 storedData 的&lt;strong&gt;无符号整型&lt;/strong&gt;的&lt;strong&gt;状态变量&lt;/strong&gt;，定义的 set 和 get 函数是用来读写变量 storedData。&lt;/p&gt;
&lt;h3&gt;数据&lt;/h3&gt;
&lt;p&gt;数据存在两个位置：要么是存储，要么是内存。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Storage&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;状态变量用来表示持久性的数据，这些值会被存储到区块链上。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;solidity&quot;&gt;&lt;pre class=&quot;language-solidity&quot;&gt;&lt;code class=&quot;language-solidity&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;contract&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;SimpleStorage&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;uint&lt;/span&gt; storedData&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// State variable&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;常见的类型包括：address，bool，整数，定点数，固定大小的字节数组，动态大小的字节数组，有理数和整数常量，字符常量，十六进制常量，枚举&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;内存变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;内存变量用来声明仅在合约函数执行阶段存在的值，这些变量不会永久存储在区块链上。&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;环境变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了在自己合约上定义的变量之外，还有一些特殊的全局变量。 它们主要用于提供有关区块链或当前交易的信息。如：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;block.timestamp&lt;/td&gt;
&lt;td&gt;uint256&lt;/td&gt;
&lt;td&gt;当前区块的时间戳&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;msg.sender&lt;/td&gt;
&lt;td&gt;地址&lt;/td&gt;
&lt;td&gt;消息的发送者（当前调用）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;函数&lt;/h3&gt;
&lt;p&gt;函数定义包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数变量和类型&lt;/li&gt;
&lt;li&gt;internal/external 声明&lt;/li&gt;
&lt;li&gt;pure/view/payable 声明&lt;/li&gt;
&lt;li&gt;返回类型&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;调用方式&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;internal：Internal 函数或者状态变量只能在内部访问&lt;/li&gt;
&lt;li&gt;external：External 函数是合约接口的一部分，可以被其他合约或者交易调用&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;常见的函数类型&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;view 函数：view 函数不会修改合约数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;constructor 函数：constructor 函数只会在合约部署的时候执行一次&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内建函数：比如：address.send()，可以将 ETH 发送给另一个账户&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;事件日志&lt;/h3&gt;
&lt;p&gt;可以通过订阅事件来完成前后端与合约的通信&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;solidity&quot;&gt;&lt;pre class=&quot;language-solidity&quot;&gt;&lt;code class=&quot;language-solidity&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Transfer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token builtin&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;address&lt;/span&gt; to&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;uint&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;emit&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Transfer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sender&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; receiver&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; amount&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;开发框架&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;hardhat：是基于 node 生态的以太网开发环境，对 js 开发者相对友好&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[K 线基础]]></title><link>https://xianchenxc.github.io/stock/candlestick-chart/</link><guid isPermaLink="false">https://xianchenxc.github.io/stock/candlestick-chart/</guid><pubDate>Sat, 07 Dec 2024 00:00:00 GMT</pubDate><content:encoded></content:encoded></item><item><title><![CDATA[Web3 入门]]></title><description><![CDATA[What Why 为什么比特币有价值 How]]></description><link>https://xianchenxc.github.io/web3/reading/</link><guid isPermaLink="false">https://xianchenxc.github.io/web3/reading/</guid><pubDate>Wed, 30 Oct 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;What&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Why&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://academy.binance.com/zh/articles/why-does-bitcoin-have-value&quot;&gt;为什么比特币有价值&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[Uniswap Developer Docs]]></title><description><![CDATA[简介 几个容易混淆的概念： Uniswap Labs：开发 uniswap 协议和 Web 接口的公司 Uniswap Protocol：用来实现 AMM 的一系列智能合约，用于实现在以太网上点对点交换加密货币 Uniswap Interface：更简易地使用 Uniswap…]]></description><link>https://xianchenxc.github.io/web3/uniswap-develop/</link><guid isPermaLink="false">https://xianchenxc.github.io/web3/uniswap-develop/</guid><pubDate>Wed, 30 Oct 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;简介&lt;/h2&gt;
&lt;p&gt;几个容易混淆的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uniswap Labs：开发 uniswap 协议和 Web 接口的公司&lt;/li&gt;
&lt;li&gt;Uniswap Protocol：用来实现 AMM 的一系列智能合约，用于实现在以太网上点对点交换加密货币&lt;/li&gt;
&lt;li&gt;Uniswap Interface：更简易地使用 Uniswap Protocol 的 Web 接口&lt;/li&gt;
&lt;li&gt;Uniswap Governance：自治管理&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Uniswap Protocol&lt;/h2&gt;
&lt;p&gt;目前有三个版本：v1，v2，v3&lt;/p&gt;</content:encoded></item><item><title><![CDATA[了解 web3]]></title><description><![CDATA[学习资料：Web3入门知识介绍【清华大学公开课】 1. 区块链简单介绍 从技术学科角度来看，区块链包含三个方面内容：密码学、分布式计算、博弈论 1.1. 密码学 包含数字签名和哈希，保证我们能： 安全地传输和验证信息 保证交易的真实性，难以篡改 1.…]]></description><link>https://xianchenxc.github.io/web3/learn-web3/</link><guid isPermaLink="false">https://xianchenxc.github.io/web3/learn-web3/</guid><pubDate>Mon, 15 Apr 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;学习资料：&lt;a href=&quot;https://www.bilibili.com/video/BV1UK411z7zG/?spm_id_from=333.337.search-card.all.click&amp;#x26;vd_source=e223ee950f66176c3524e50fe70f97aa&quot;&gt;Web3入门知识介绍【清华大学公开课】&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;1. 区块链简单介绍&lt;/h2&gt;
&lt;p&gt;从技术学科角度来看，区块链包含三个方面内容：密码学、分布式计算、博弈论&lt;/p&gt;
&lt;h3&gt;1.1. 密码学&lt;/h3&gt;
&lt;p&gt;包含数字签名和哈希，保证我们能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安全地传输和验证信息&lt;/li&gt;
&lt;li&gt;保证交易的真实性，难以篡改&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.2. 分布式计算&lt;/h3&gt;
&lt;p&gt;分布式计算和共识协议是设计如何让所有人能够共同维护一个一致的账本，让每个人的账本信息都一致。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何让所有人共同维护&lt;/li&gt;
&lt;li&gt;达成一致&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.3. 博弈论&lt;/h3&gt;
&lt;p&gt;博弈论研究的是如何让所有人去参与这个区块链网络，如何去维护这个网络。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何给予激励使得人们参与记账&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2. 比特币&lt;/h2&gt;
&lt;p&gt;比特币是基于区块链的电子支付系统，同时也是支付工具。比特币的三个特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目的：支付&lt;/li&gt;
&lt;li&gt;形式：点对点，不需要中间人&lt;/li&gt;
&lt;li&gt;支付的工具：比特币&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;电子现金系统需要解决两个问题，比特币是如何解决的？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我的钱只能我花出去&lt;/li&gt;
&lt;li&gt;及时记好每一笔账，不会被篡改&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;2.1. 数字签名&lt;/h3&gt;
&lt;p&gt;比特币系统通过数字签名的方式保证“我的钱只能我花出去”，数字签名通过私钥加密公钥解密的方式实现。数字签名一般包含三个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成私钥和公钥：generateKeys&lt;/li&gt;
&lt;li&gt;生成数字签名：sign&lt;/li&gt;
&lt;li&gt;验证签名：verify&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;钱包的地址和公钥是一一对应的，钱包就是公钥，人们可以通过地址来验证交易是否是公钥对应的私钥发起的交易。&lt;/p&gt;
&lt;h3&gt;2.2. 哈希函数&lt;/h3&gt;
&lt;p&gt;哈希函数的两个特征：F(X) = Y&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;已知 Y，很难知道 X&lt;/li&gt;
&lt;li&gt;两个不同的 X 得不到同一个 Y&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;区块链中的区块由区块头和区块体组成。其中区块头包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Version：版本信息&lt;/li&gt;
&lt;li&gt;Previous block header hash：前一个区块头的哈希值&lt;/li&gt;
&lt;li&gt;Timestamp：时间戳&lt;/li&gt;
&lt;li&gt;Difficulty：难度&lt;/li&gt;
&lt;li&gt;Nonce：&lt;/li&gt;
&lt;li&gt;MerkleRoot：当前区块交易信息的哈希值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个区块头不仅记录当前区块的交易信息，且记录了上一个区块里发生的交易。&lt;/p&gt;
&lt;h3&gt;2.3. 比特币分叉&lt;/h3&gt;
&lt;p&gt;社区意见的分裂：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一部分人认为比特币具有存储价值：
&lt;ul&gt;
&lt;li&gt;价格波动不适宜支付&lt;/li&gt;
&lt;li&gt;没有频繁交易的需求&lt;/li&gt;
&lt;li&gt;网络安全第一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;另一部分人认为比特币作为支付手段：
&lt;ul&gt;
&lt;li&gt;用于频繁的交易&lt;/li&gt;
&lt;li&gt;交易手续费低&lt;/li&gt;
&lt;li&gt;交易速度快&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;交易速度对比&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比特币：比特币一个区块容量是 1M，假设一个交易占的容量是200B，那么10分钟能记录的交易数是 1000000/200 = 5000，则：1秒能处理的交易数是 5000/(60*10) = 8&lt;/li&gt;
&lt;li&gt;Visa：2019年平均每秒处理几千笔交易&lt;/li&gt;
&lt;li&gt;Paypal：2018年每秒处理几百笔交易&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大笔的交易造成区块链网络拥堵，比特币网络核心开发者/利益方/用户对扩容存在争执。
硬分叉&amp;#x26;软分叉&lt;/p&gt;
&lt;h2&gt;3. 工作量证明&lt;/h2&gt;
&lt;p&gt;哈希计算&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;矿工激励&lt;/li&gt;
&lt;li&gt;矿工算力&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;4. 以太坊&lt;/h2&gt;
&lt;h3&gt;4.1. 以太坊 vs 比特币&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;相似之处&lt;/th&gt;
&lt;th&gt;差异&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;工作量证明机制（以太坊已经向权益证明机制转变）&lt;br /&gt; 点对点的网络&lt;br /&gt;数字签名和哈希函数&lt;br /&gt;数字货币&lt;br /&gt;Ether&lt;/td&gt;
&lt;td&gt;以太坊是不断更新的区块链网络 &lt;br /&gt;以太坊不只是数字货币，还可以运行合约和应用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;4.2. 有哪些应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;加密猫&lt;/li&gt;
&lt;li&gt;政务选举/食品溯源&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4.3. 繁荣与衰败&lt;/h3&gt;
&lt;p&gt;Token 广义的定义：数字化的价值代表
Token 代表什么：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Currency：用于支付的数字货币&lt;/li&gt;
&lt;li&gt;Collectible：加密猫，名画&lt;/li&gt;
&lt;li&gt;Asset：实物资产&lt;/li&gt;
&lt;li&gt;Equity：控制权和所有权&lt;/li&gt;
&lt;li&gt;Utility：获得服务或资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IPO：initial public offtering
ICO（initial coin offering）：售卖 Token 融资&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utility Token：功能型的token，获得服务或资源的权利&lt;/li&gt;
&lt;li&gt;Security Token：证券型的token，某种东西的控制或所有权&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Token 是否有价值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无太大价值的东西（功能性token）&lt;/li&gt;
&lt;li&gt;流动性差，限定用途（功能性token）&lt;/li&gt;
&lt;li&gt;带动大规模经济的商业价值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4.4. 权益证明&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;POW 中哈希计算根本没有意义和价值？正是因为没有价值，才能避免破坏。&lt;/li&gt;
&lt;li&gt;POS 权益证明机制
&lt;ul&gt;
&lt;li&gt;持币的数目&lt;/li&gt;
&lt;li&gt;持币的时间&lt;/li&gt;
&lt;li&gt;稳定在线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DPOS 委托权益证明机制（类似董事会）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;EOS 项目，选出 21 个节点（超级节点）：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; - 目的：商业应用平台
 - 形式：点对点，不需要中间人
 - 区块内容：支付转账，运行合约或应用程序
 - 数字货币：EOS -&gt; 支付/功能性货币
 - 共识机制：投票委托节点进行记账，在不能逆转（2/3的超级节点同意）的区块上链接&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;5. 加密货币&lt;/h2&gt;
&lt;h3&gt;5.1. 加密货币争议&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;货币创造&lt;/li&gt;
&lt;li&gt;投资产品&lt;/li&gt;
&lt;li&gt;购买商品/转账的支付手段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同国家的证监会对于加密货币的态度不同，在中国的三大不允许：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;售卖数字货币进行融资&lt;/li&gt;
&lt;li&gt;交易平台&lt;/li&gt;
&lt;li&gt;支付使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主流投资机构不认同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比特币不属于资产（高盛）&lt;/li&gt;
&lt;li&gt;比特币是老鼠毒药（巴菲特）&lt;/li&gt;
&lt;li&gt;比特币是诈骗（摩根大通）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主流投资机构开始关注。&lt;/p&gt;
&lt;h3&gt;5.2. 加密货币的价格因素&lt;/h3&gt;
&lt;p&gt;股票价值 = 未来的现金流的折现&lt;/p&gt;
&lt;p&gt;影响币的价格的因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;和每个币自身相关的因素
&lt;ul&gt;
&lt;li&gt;区块链团队的技术能力&lt;/li&gt;
&lt;li&gt;区块链项目的社区活跃度
&lt;ul&gt;
&lt;li&gt;技术者的交流社区&lt;/li&gt;
&lt;li&gt;投资者的交流社区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;和整体市场相关的因素
&lt;ul&gt;
&lt;li&gt;宏观信息&lt;/li&gt;
&lt;li&gt;市场交易信息
&lt;ul&gt;
&lt;li&gt;流动性&lt;/li&gt;
&lt;li&gt;交易量&lt;/li&gt;
&lt;li&gt;内幕信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;5.3. 加密货币与股市的关系&lt;/h3&gt;
&lt;p&gt;从通常情况下，加密货币与股市相关性不大&lt;/p&gt;
&lt;h3&gt;5.4. 加密货币的减半机制&lt;/h3&gt;
&lt;h3&gt;5.5. 加密货币的会计计量和税收&lt;/h3&gt;
&lt;p&gt;存在于分布式账本上：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用实体&lt;/li&gt;
&lt;li&gt;不是法币&lt;/li&gt;
&lt;li&gt;不是和实物货币对应的数字货币&lt;/li&gt;
&lt;li&gt;数字化的价值代表
&lt;ul&gt;
&lt;li&gt;资产类&lt;/li&gt;
&lt;li&gt;证券类&lt;/li&gt;
&lt;li&gt;功能类&lt;/li&gt;
&lt;li&gt;用于支付&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公司资产 = 负载 + 股东的权益&lt;/p&gt;
&lt;h2&gt;6. 区块链的应用&lt;/h2&gt;
&lt;p&gt;区块链是一个分布式的共享账本和数据库，具有去中心化、不可篡改、全程留痕、可以追溯、集体维护、公开透明等特点。&lt;/p&gt;
&lt;h3&gt;6.1. 如何设计区块链应用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;根据治理结构不同，可以氛围：
&lt;ul&gt;
&lt;li&gt;公链形式&lt;/li&gt;
&lt;li&gt;联盟链形式&lt;/li&gt;
&lt;li&gt;中性化形式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用技术特点：不可篡改、全程留痕、可以追溯&lt;/li&gt;
&lt;li&gt;区块链应用范围：
&lt;ul&gt;
&lt;li&gt;涉及token&lt;/li&gt;
&lt;li&gt;不涉及token&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;6.2. 数字货币&lt;/h3&gt;
&lt;p&gt;分为两类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私人发行的数字货币
&lt;ul&gt;
&lt;li&gt;基于公链的加密数字货币&lt;/li&gt;
&lt;li&gt;基于联盟链的加密数字货币&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;主权数字货币
&lt;ul&gt;
&lt;li&gt;基于中心化的形式&lt;/li&gt;
&lt;li&gt;利用区块链的技术特点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;供应链金融、存证&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Dynamic Programming]]></title><description><![CDATA[目标： 了解什么是动态规划 理清动态规划的核心原理 常用的动态规划的应用场景 What is Dynamic Programming? Dynamic Programming is a computer programming technique where an…]]></description><link>https://xianchenxc.github.io/ds&amp;algorithms/dynamic-programming/</link><guid isPermaLink="false">https://xianchenxc.github.io/ds&amp;algorithms/dynamic-programming/</guid><pubDate>Sat, 06 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;目标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;了解什么是动态规划&lt;/li&gt;
&lt;li&gt;理清动态规划的核心原理&lt;/li&gt;
&lt;li&gt;常用的动态规划的应用场景&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What is Dynamic Programming?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Dynamic Programming is a computer programming technique where an algorithm probleam is first broken down into sub-problems, the results are saved, and then the sub-problems are optimized to find the overall solution - which usually has to do with finding the maximum and minimum range of the algorithmic query.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;动态规划，是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题。&lt;/p&gt;
&lt;h2&gt;How does Dynamic Programming work?&lt;/h2&gt;
&lt;p&gt;Dynamic Programming works by break down complex problem into &lt;strong&gt;simpler subproblems&lt;/strong&gt;. Then, finding optimal solutions to these subproblems. &lt;strong&gt;Memorization&lt;/strong&gt; is a method that saves the outcomes of these processes so that the corresponding answers do not need to computed when thery are later needed.&lt;/p&gt;
&lt;p&gt;动态规划的核心思想是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拆分子问题：将复杂的问题拆成相对简单的子问题&lt;/li&gt;
&lt;li&gt;缓存：子问题会存在重叠部分，通过缓存，减少重复计算&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;动态规划可以通过以下两种方式实现：&lt;/p&gt;
&lt;h3&gt;Top-down approach&lt;/h3&gt;
&lt;p&gt;在计算机科学中，我们通常使用递归算法来求解问题。如果子问题存在重叠，则可以通过缓存和记表的方式来减少重复计算。&lt;/p&gt;
&lt;h3&gt;Bottom-up approach&lt;/h3&gt;
&lt;p&gt;如果一个问题问题可以通过不断&lt;/p&gt;
&lt;h2&gt;Applications&lt;/h2&gt;
&lt;h3&gt;接雨水&lt;/h3&gt;
&lt;p&gt;问题链接：&lt;a href=&quot;https://leetcode.cn/problems/trapping-rain-water/description/&quot;&gt;https://leetcode.cn/problems/trapping-rain-water/description/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单分析：假设第 i 根柱子能接 rain[i] 雨水，那么一共能接 rain[0] + rain[1] + … + rain[len - 1]，问题的关键在于如何计算第 i 根柱子能接多少雨水？第 i 根柱子能接多少雨水，取决于左/右侧最高的柱子高度的较小值 - 第 i 根柱子的高度，即:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;rain[i] = Math.min(maxLeft[i] - maxRight[i]) - height[i]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;问题转变为：计算第 i 根柱子左右两边的最大高度，最简单的方法，遍历 [0, i) 和 (i, len)，时间复杂度为 O(n)，整体时间复杂度 O(n^2)&lt;/p&gt;
&lt;p&gt;我们注意到求 maxLeft[i] 和 maxLeft[i - 1]，其实重复遍历计算了 [0, i - 1]，这是没有必要的，当知道 maxLeft[i - 1] 时，只需要简单比较 maxLeft[i - 1] 和 height[i] 即可：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;maxLeft[i] = Math.max(maxLeft[i - 1], height[i - 1])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样，计算 maxLeft[i] 的时间复杂度从 O(n) 变成 O(1)，整体复杂度变为 O(n)。&lt;/p&gt;
&lt;h2&gt;参考文档&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.spiceworks.com/tech/devops/articles/what-is-dynamic-programming/&quot;&gt;What is Dynamic Programming?&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[贪心算法]]></title><description><![CDATA[Introduction 贪心算法是在每一步选择中都选择当前状态下最好或最优的选择，从而希望导致结果时最好或最优的算法。 Props and Cons 优点：简单，易于实现，运行快 缺点：算法经常不能提供全局最优解。 When to Use…]]></description><link>https://xianchenxc.github.io/ds&amp;algorithms/greedy-algorithm/</link><guid isPermaLink="false">https://xianchenxc.github.io/ds&amp;algorithms/greedy-algorithm/</guid><pubDate>Sat, 06 Jan 2024 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;贪心算法是在每一步选择中都选择&lt;strong&gt;当前状态&lt;/strong&gt;下最好或最优的选择，从而希望导致结果时最好或最优的算法。&lt;/p&gt;
&lt;h2&gt;Props and Cons&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;优点：简单，易于实现，运行快&lt;/li&gt;
&lt;li&gt;缺点：算法经常不能提供全局最优解。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;When to Use？&lt;/h2&gt;
&lt;p&gt;用贪心算法解决的问题需要满足两个特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;贪心选择：问题的整体最优解可以通过一系列局部最优的选择来达到&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最优子结构：问题的最优解包含其子问题的最优解&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Applications&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=poWB2UCuozA&quot;&gt;Activity Selection Problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Huffman Coding&lt;/li&gt;
&lt;li&gt;Job Sequencing Problem&lt;/li&gt;
&lt;li&gt;Fractional Knapsack Problem&lt;/li&gt;
&lt;li&gt;Prim’s Minimum Spanning Tree&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[LEB128 编码格式]]></title><description><![CDATA[LEB 128（Little Endian Base 128）是一种变长的整数压缩编码形式。它被应用于 DWARF debug file format，wasm 的整数字面量的二进制编码，以及 quickjs 的字节码中。 编码 每个 LEB128 编码值均由 1-…]]></description><link>https://xianchenxc.github.io/quickjs/leb128/</link><guid isPermaLink="false">https://xianchenxc.github.io/quickjs/leb128/</guid><pubDate>Tue, 21 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;LEB 128（Little Endian Base 128）是一种变长的整数压缩编码形式。它被应用于 &lt;a href=&quot;https://en.wikipedia.org/wiki/DWARF&quot;&gt;DWARF&lt;/a&gt; debug file format，wasm 的整数字面量的二进制编码，以及 quickjs 的字节码中。&lt;/p&gt;
&lt;h2&gt;编码&lt;/h2&gt;
&lt;table border=&quot;1&quot;&gt;
  &lt;tr &gt;
    &lt;td colspan=&quot;16&quot;&gt;双字节 LEB128 值的按位图&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td colspan=&quot;8&quot;&gt;第一个字节&lt;/td&gt;
    &lt;td colspan=&quot;8&quot;&gt;第二个字节&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;1&lt;/td&gt;
    &lt;td&gt;bit6&lt;/td&gt;
    &lt;td&gt;bit5&lt;/td&gt;
    &lt;td&gt;bit4&lt;/td&gt;
    &lt;td&gt;bit3&lt;/td&gt;
    &lt;td&gt;bit2&lt;/td&gt;
    &lt;td&gt;bit1&lt;/td&gt;
    &lt;td&gt;bit0&lt;/td&gt;
    &lt;td&gt;0&lt;/td&gt;
    &lt;td&gt;bit13&lt;/td&gt;
    &lt;td&gt;bit12&lt;/td&gt;
    &lt;td&gt;bit11&lt;/td&gt;
    &lt;td&gt;bit10&lt;/td&gt;
    &lt;td&gt;bit9&lt;/td&gt;
    &lt;td&gt;bit8&lt;/td&gt;
    &lt;td&gt;bit7&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;每个 LEB128 编码值均由 1-5 个字节组成，共同表示一个 32 位的值。每个字节最高位是信息位，1 表示后续还有字节，0 表示结束；每个字节的剩余 7 位均为有效负荷，即第一个字节中有 7 个最低有效位，第二个字节中也是 7 个，依此类推。&lt;/p&gt;
&lt;p&gt;LEB128 有两种变体，分为有符号 leb128 和无符号 leb128 两种，两者编码和解码有所差别。&lt;/p&gt;
&lt;h3&gt;无符号 leb128&lt;/h3&gt;
&lt;p&gt;用 uleb128 编码，主要分为五步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;二进制表示&lt;/li&gt;
&lt;li&gt;因为信息位是 7 的倍数，所以左侧补 0&lt;/li&gt;
&lt;li&gt;每 7 位分一组&lt;/li&gt;
&lt;li&gt;每组高位加标志位&lt;/li&gt;
&lt;li&gt;转为小端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以 624485 为例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MSB ------------------ LSB
      10011000011101100101  step 1
     010011000011101100101  step 2
 0100110  0001110  1100101  step 3
00100110 10001110 11100101  step 4
    0x26     0x8E     0xE5  

→ 0xE5 0x8E 0x26            step 5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;有符号 leb128&lt;/h3&gt;
&lt;p&gt;和 uleb128 的区别在于，在 step 2 和 step 3 之间，增加计算补码的过程：&lt;/p&gt;
&lt;p&gt;以 -123456 为例：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;MSB ------------------ LSB
         11110001001000000  123456 二进制表示
     000011110001001000000  左侧补 0，使得 bit 位是 7 的倍数
     111100001110110111111  （补码 step1）按位取反
     111100001110111000000  （补码 step2）+1
 1111000  0111011  1000000  每 7 位分一组
01111000 10111011 11000000  每组高位加标志位
    0x78     0xBB     0xC0  In hexadecimal

→ 0xC0 0xBB 0x78            转为小端表示&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;解码&lt;/h2&gt;
&lt;p&gt;解码其实就是编码的逆过程。&lt;/p&gt;
&lt;h2&gt;代码&lt;/h2&gt;
&lt;p&gt;代码逻辑是取自 &lt;code class=&quot;language-text&quot;&gt;quickjs&lt;/code&gt;，做了一些改动。&lt;/p&gt;
&lt;h3&gt;uleb128 encode&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;encode_leb128&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; pos &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x7f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        v &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            buf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;pos&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            buf&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;pos&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;uleb128 decode&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_leb128&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pval&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;buf&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;ptr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; buf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;uint32_t&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    v &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;ptr&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        v &lt;span class=&quot;token operator&quot;&gt;|=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x7f&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x80&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ptr &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; buf&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;pval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[双指针]]></title><description><![CDATA[双指针（two-pointers…]]></description><link>https://xianchenxc.github.io/ds&amp;algorithms/two-pointers-technique/</link><guid isPermaLink="false">https://xianchenxc.github.io/ds&amp;algorithms/two-pointers-technique/</guid><pubDate>Mon, 20 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;双指针（two-pointers) 指的是在迭代对象的过程中，使用两个相同方向或者相反方向的指针进行扫描。在处理&lt;strong&gt;有序&lt;/strong&gt;数组搜索问题中，简单且高效。&lt;/p&gt;
&lt;h2&gt;快慢指针&lt;/h2&gt;
&lt;h2&gt;对撞指针&lt;/h2&gt;
&lt;p&gt;定义两个指针：左指针 &lt;code class=&quot;language-text&quot;&gt;left&lt;/code&gt; 和右指针 &lt;code class=&quot;language-text&quot;&gt;right&lt;/code&gt;，且使左指针指向数组左侧，右指针指向数组右侧。在迭代过程中，左指针不断右移，右指针不断左移，直到发生&lt;strong&gt;碰撞&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;// 伪代码, 数组长度为 arraySize
int left = 0;
int right = arraySize;

while(left &amp;lt;= right) {
  if (condition) {
    left++;
  }

  if (another condition) {
    right--;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;有序数组的平方&lt;/h3&gt;
&lt;p&gt;给你一个按&lt;strong&gt;非递减顺序&lt;/strong&gt;排序的整数数组 nums，返回&lt;strong&gt;每个数字的平方&lt;/strong&gt;组成的新数组，要求也按&lt;strong&gt;非递减顺序&lt;/strong&gt;排序。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/squares-of-a-sorted-array/&quot;&gt;有序数组的平方&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;解决思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关键字&lt;strong&gt;非递减顺序&lt;/strong&gt;，说明数组是有序的，可以使用双指针；&lt;/li&gt;
&lt;li&gt;假设存在一个 k，使得：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;i &amp;#x3C; k, nums[i] &amp;#x3C; 0&lt;/li&gt;
&lt;li&gt;k &amp;#x3C; i, 0 &amp;#x3C; nums[i]&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;平方后，可得：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;i &amp;#x3C; k, nums 顺序性发生变化，平方后的数组为降序，↓&lt;/li&gt;
&lt;li&gt;k &amp;#x3C; i, nums 顺序性不变，升序 ↑。&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;令 left = 0, right = nums.length - 1，那么最大元素为 max(left, right)：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;若 left 更大，left 为剩余最大元素，left 指针所指向的元素填入 ans 数组，同时 left 指针右移&lt;/li&gt;
&lt;li&gt;若 right 更大，right 为剩余中最大元素，right 指针所指向的元素填入 ans 数组，同时 right 指针左移&lt;/li&gt;
&lt;li&gt;不断迭代，直至左右指针发生碰撞。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;js&quot;&gt;&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;sortedSquares&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ans &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;token comment&quot;&gt;// 结构数组&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// &lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; left &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; right &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;left &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; right&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      ans&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;right&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      right&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      ans&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; nums&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;left&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      left&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    i&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ans&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[线性表]]></title><description><![CDATA[线性表（Linear List） 线性表是 n (n ≥ 0) 个数据元素的一个有限的序列。记为 其中，L 是表名，ai 是表中数据元素，是不可再分割的原子数据，亦称为结点或表项。n 为表的长度，若 n = 0 叫做空表。第一个表项为表头，最后一个表项为表尾。 ADT]]></description><link>https://xianchenxc.github.io/ds&amp;algorithms/linear-list/</link><guid isPermaLink="false">https://xianchenxc.github.io/ds&amp;algorithms/linear-list/</guid><pubDate>Wed, 15 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;线性表（Linear List）&lt;/h2&gt;
&lt;p&gt;线性表是 n (n ≥ 0) 个数据元素的一个&lt;strong&gt;有限&lt;/strong&gt;的序列。记为&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; L = (a1, a2, ... an)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，L 是表名，ai 是表中数据元素，是不可再分割的原子数据，亦称为结点或表项。n 为表的长度，若 n = 0 叫做空表。第一个表项为表头，最后一个表项为表尾。&lt;/p&gt;
&lt;h3&gt;ADT&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ADT LinearList is
Objects: n(≥ 0) 个原子表项的一个有限序列。每个表项的数据类型为 T。
Function:
  create()
  int Length()
  int search(T&amp;amp; x)
  int Locate(int i)             定位函数：返回第 i 个表项在表中位置
  bool getData(int i, T&amp;amp; x)
  void setData(int i, T&amp;amp; x)
  bool Insert(int i, T&amp;amp; x)
  bool Remove(int i, T&amp;amp; x)
  bool IsEmpty()
  bool IsFull()
  void CopyList(List&amp;lt;T&gt;&amp;amp; L)
  void Sort()
end LinearList&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[在 windows 上配置 c/c++ 开发环境]]></title><description><![CDATA[作为一个前端开发工程师，接触最多的编辑器就是 vscode，所以在我需要搭建c/c++开发环境时，第一选择就是 vscode，差点没把我劝退了🙃。 在进入到 vscode 配置之前，我们需要了解几个工具，以及工具的作用。只有清楚这些工具的作用，才能更好的理解 vscode…]]></description><link>https://xianchenxc.github.io/C/tools/how-to-configure-cpp-debugger-with-vscode/</link><guid isPermaLink="false">https://xianchenxc.github.io/C/tools/how-to-configure-cpp-debugger-with-vscode/</guid><pubDate>Sat, 11 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;作为一个前端开发工程师，接触最多的编辑器就是 vscode，所以在我需要搭建c/c++开发环境时，第一选择就是 vscode，差点没把我劝退了🙃。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cpp&quot;&gt;&lt;pre class=&quot;language-cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token macro property&quot;&gt;&lt;span class=&quot;token directive-hash&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;token directive keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&amp;lt;iostream&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; std&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  cout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Hello C++&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; endl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在进入到 vscode 配置之前，我们需要了解几个工具，以及工具的作用。只有清楚这些工具的作用，才能更好的理解 vscode 的配置。&lt;/p&gt;
&lt;h2&gt;what hell is g++, gdb, make and cmake?&lt;/h2&gt;
&lt;h3&gt;g++&lt;/h3&gt;
&lt;p&gt;与 JavaScript 这类的脚本语言不同，cpp 代码需要先编译，再执行。g++ 就是 C++ 的编译器，它能给把代码字符串编译成字节码，在 windows 编译结果就是 exe 文件：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;g++ test.cpp &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; test.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;多文件编译的话，也很简单：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;g++ test.cpp test2.cpp &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; test.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;gdb&lt;/h3&gt;
&lt;p&gt;在前端开发过程中，我们经常会用到浏览器的 debugger 工具进行断点调试。gdb 就是用来进行 cpp 代码调试的。为了更好的调试体验，我们需要在编译文件中增加一些信息，比如代码是行列信息，这就需要通过参数 &lt;code class=&quot;language-text&quot;&gt;-g&lt;/code&gt; 告诉编译器：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;g++ &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; test.cpp &lt;span class=&quot;token parameter variable&quot;&gt;-o&lt;/span&gt; test.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再通过以下命令进行 cpp 调试：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;gdb test.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;make &amp;#x26; cmake&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gcc/g++&lt;/code&gt; 是编译工具，而 &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt; 是构建工具，有点类似于 &lt;code class=&quot;language-text&quot;&gt;gulp&lt;/code&gt; 和 &lt;code class=&quot;language-text&quot;&gt;babel&lt;/code&gt; 的区别。&lt;/p&gt;
&lt;p&gt;构建是一个非常复杂的过程，哪些文件需要先编译，哪些需要后编译等，开发者需要通过 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 去编写构建规则去指示 &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt; 工具。&lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 设计一整套语法，支持规则的编写。手写 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 是一件麻烦的事情，不同的平台可能需要编写不同的 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 工具。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 的出现就是为了简化这一过程，&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 能给帮你生成 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 文件，你没看错，&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 不是替代 &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt;，而且为了更简便使用 &lt;code class=&quot;language-text&quot;&gt;make&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;那么，&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 是如何生成 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 文件的呢？答案是，你需要配置 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt;。&lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 会根据你手写的 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt; 生成 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt;， 所以 &lt;code class=&quot;language-text&quot;&gt;cmake = make maker&lt;/code&gt;，😃。一个最简单的 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt; 差不多是这样：&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cmake&quot;&gt;&lt;pre class=&quot;language-cmake&quot;&gt;&lt;code class=&quot;language-cmake&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test test.cpp test1.cpp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;vscode 配置&lt;/h2&gt;
&lt;h3&gt;配置编译构建任务 task.json&lt;/h3&gt;
&lt;p&gt;我们以 &lt;code class=&quot;language-text&quot;&gt;cmake&lt;/code&gt; 为示例，用 &lt;code class=&quot;language-text&quot;&gt;g++&lt;/code&gt;也是同理。&lt;/p&gt;
&lt;h4&gt;准备阶段&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;首先，在项目根目录下，新建文件 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;其次，配置 &lt;code class=&quot;language-text&quot;&gt;CMakeLists.txt&lt;/code&gt;;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;cmake&quot;&gt;&lt;pre class=&quot;language-cmake&quot;&gt;&lt;code class=&quot;language-cmake&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;add_executable&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;test test.cpp test1.cpp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;最后，在项目根目录下，创建 &lt;code class=&quot;language-text&quot;&gt;build&lt;/code&gt; 目录;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;正式构建&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;进入到 &lt;code class=&quot;language-text&quot;&gt;build&lt;/code&gt; 目录下，执行以下命令生成 &lt;code class=&quot;language-text&quot;&gt;Makefile&lt;/code&gt; 文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; build
cmake &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;执行 make 命令生成可执行文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sh&quot;&gt;&lt;pre class=&quot;language-sh&quot;&gt;&lt;code class=&quot;language-sh&quot;&gt;mingw32-make.exe&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;让 vscode 替你完成步骤 1 和 2，配置 &lt;code class=&quot;language-text&quot;&gt;task.json&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2.0.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;options&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;token property&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${workspaceFolder}/build&quot;&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;token property&quot;&gt;&quot;tasks&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cmake&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cmake&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
				&lt;span class=&quot;token string&quot;&gt;&quot;..&quot;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;make&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;mingw32-make.exe&quot;&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;build&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
			&lt;span class=&quot;token property&quot;&gt;&quot;dependsOn&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
				&lt;span class=&quot;token string&quot;&gt;&quot;cmake&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;token string&quot;&gt;&quot;make&quot;&lt;/span&gt;
			&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;配置调试 launch.json&lt;/h3&gt;
&lt;p&gt;配置参数比较多，大多数是 vscode 自动生成的，我们需要关注以下几个参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;program&lt;/td&gt;
&lt;td&gt;调试程序，因为这里通过 cmake 构建的，构建产物在 build 目录下&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;miDebuggerPath&lt;/td&gt;
&lt;td&gt;degugger 调试工具路径，这里就是 gdb 的路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;preLaunchTask&lt;/td&gt;
&lt;td&gt;调试前需要做的任务，这里配置的 &lt;code class=&quot;language-text&quot;&gt;build&lt;/code&gt; 就是对应 &lt;code class=&quot;language-text&quot;&gt;task.json&lt;/code&gt; 的 &lt;code class=&quot;language-text&quot;&gt;tasks[2]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;(gdb) 启动&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;cppdbg&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${fileDirname}\\build\\example.exe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;stopAtEntry&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;cwd&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;environment&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;externalConsole&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;MIMode&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gdb&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;miDebuggerPath&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C:\\Program Files (x86)\\mingw-w64\\mingw32\\bin\\gdb.exe&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;setupCommands&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;为 gdb 启用整齐打印&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-enable-pretty-printing&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;token property&quot;&gt;&quot;ignoreFailures&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;preLaunchTask&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;build&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;好了，vscode 的 c/c++ 的开发/调试环境就配置好了，又可以愉快的断点调试了 🥂。&lt;/p&gt;</content:encoded></item></channel></rss>