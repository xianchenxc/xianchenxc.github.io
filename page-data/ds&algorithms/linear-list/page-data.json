{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/ds&algorithms/linear-list/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HelloCode"}},"markdownRemark":{"id":"da7d9a3d-e62b-5e3c-9ff9-54f3b997d634","excerpt":"线性表（Linear List） 线性表是 n (n ≥ 0) 个数据元素的一个有限的序列。记为 其中，L 是表名，ai 是表中数据元素，是不可再分割的原子数据，亦称为结点或表项。n 为表的长度，若 n = 0 叫做空表。第一个表项为表头，最后一个表项为表尾。 ADT","html":"<h2>线性表（Linear List）</h2>\n<p>线性表是 n (n ≥ 0) 个数据元素的一个<strong>有限</strong>的序列。记为</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> L = (a1, a2, ... an)</code></pre></div>\n<p>其中，L 是表名，ai 是表中数据元素，是不可再分割的原子数据，亦称为结点或表项。n 为表的长度，若 n = 0 叫做空表。第一个表项为表头，最后一个表项为表尾。</p>\n<h3>ADT</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ADT LinearList is\nObjects: n(≥ 0) 个原子表项的一个有限序列。每个表项的数据类型为 T。\nFunction:\n  create()\n  int Length()\n  int search(T&amp; x)\n  int Locate(int i)             定位函数：返回第 i 个表项在表中位置\n  bool getData(int i, T&amp; x)\n  void setData(int i, T&amp; x)\n  bool Insert(int i, T&amp; x)\n  bool Remove(int i, T&amp; x)\n  bool IsEmpty()\n  bool IsFull()\n  void CopyList(List&lt;T>&amp; L)\n  void Sort()\nend LinearList</code></pre></div>","frontmatter":{"title":"线性表","date":"September 15, 2021","description":"主要讨论一般线性表的表示，并且介绍了不同的实现线性表的方法，最后介绍了线性表的简单应用。"}},"previous":{"fields":{"slug":"/C/tools/how-to-configure-cpp-debugger-with-vscode/"},"frontmatter":{"title":"在 windows 上配置 c/c++ 开发环境"}},"next":{"fields":{"slug":"/ds&algorithms/two-pointers-technique/"},"frontmatter":{"title":"双指针"}}},"pageContext":{"id":"da7d9a3d-e62b-5e3c-9ff9-54f3b997d634","previousPostId":"0ae5a8b9-6a9d-576e-9b36-272a83f64826","nextPostId":"128bb5c1-a87a-54d5-9e45-07b7ea99a37d"}},
    "staticQueryHashes": ["2841359383","3257411868"]}