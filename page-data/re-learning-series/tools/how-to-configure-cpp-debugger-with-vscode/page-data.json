{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/re-learning-series/tools/how-to-configure-cpp-debugger-with-vscode/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HelloCode"}},"markdownRemark":{"id":"b18c730c-81a6-5b00-851b-9f203102f86f","excerpt":"作为一个前端开发工程师，接触最多的编辑器就是 vscode，所以在我需要搭建c/c++开发环境时，第一选择就是 vscode，差点没把我劝退了🙃。 在进入到 vscode 配置之前，我们需要了解几个工具，以及工具的作用。只有清楚这些工具的作用，才能更好的理解 vscode 的配置。 what hell is g…","html":"<p>作为一个前端开发工程师，接触最多的编辑器就是 vscode，所以在我需要搭建c/c++开发环境时，第一选择就是 vscode，差点没把我劝退了🙃。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello C++\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在进入到 vscode 配置之前，我们需要了解几个工具，以及工具的作用。只有清楚这些工具的作用，才能更好的理解 vscode 的配置。</p>\n<h2>what hell is g++, gdb, make and cmake?</h2>\n<h3>g++</h3>\n<p>与 JavaScript 这类的脚本语言不同，cpp 代码需要先编译，再执行。g++ 就是 C++ 的编译器，它能给把代码字符串编译成字节码，在 windows 编译结果就是 exe 文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">g++ test.cpp -o test.exe</code></pre></div>\n<p>多文件编译的话，也很简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">g++ test.cpp test2.cpp -o test.exe</code></pre></div>\n<h3>gdb</h3>\n<p>在前端开发过程中，我们经常会用到浏览器的 debugger 工具进行断点调试。gdb 就是用来进行 cpp 代码调试的。为了更好的调试体验，我们需要在编译文件中增加一些信息，比如代码是行列信息，这就需要通过参数 <code class=\"language-text\">-g</code> 告诉编译器：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">g++ -g test.cpp -o test.exe</code></pre></div>\n<p>再通过以下命令进行 cpp 调试：</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">gdb test.exe</code></pre></div>\n<h3>make &#x26; cmake</h3>\n<p><code class=\"language-text\">gcc/g++</code> 是编译工具，而 <code class=\"language-text\">make</code> 是构建工具，有点类似于 <code class=\"language-text\">gulp</code> 和 <code class=\"language-text\">babel</code> 的区别。</p>\n<p>构建是一个非常复杂的过程，哪些文件需要先编译，哪些需要后编译等，开发者需要通过 <code class=\"language-text\">Makefile</code> 去编写构建规则去指示 <code class=\"language-text\">make</code> 工具。<code class=\"language-text\">Makefile</code> 设计一整套语法，支持规则的编写。手写 <code class=\"language-text\">Makefile</code> 是一件麻烦的事情，不同的平台可能需要编写不同的 <code class=\"language-text\">Makefile</code> 工具。</p>\n<p><code class=\"language-text\">cmake</code> 的出现就是为了简化这一过程，<code class=\"language-text\">cmake</code> 能给帮你生成 <code class=\"language-text\">Makefile</code> 文件，你没看错，<code class=\"language-text\">cmake</code> 不是替代 <code class=\"language-text\">make</code>，而且为了更简便使用 <code class=\"language-text\">make</code>。</p>\n<p>那么，<code class=\"language-text\">cmake</code> 是如何生成 <code class=\"language-text\">Makefile</code> 文件的呢？答案是，你需要配置 <code class=\"language-text\">CMakeLists.txt</code>。<code class=\"language-text\">cmake</code> 会根据你手写的 <code class=\"language-text\">CMakeLists.txt</code> 生成 <code class=\"language-text\">Makefile</code>， 所以 <code class=\"language-text\">cmake = make maker</code>，😃。一个最简单的 <code class=\"language-text\">CMakeLists.txt</code> 差不多是这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>test test.cpp test1.cpp<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>vscode 配置</h2>\n<h3>配置编译构建任务 task.json</h3>\n<p>我们以 <code class=\"language-text\">cmake</code> 为示例，用 <code class=\"language-text\">g++</code>也是同理。</p>\n<h4>准备阶段</h4>\n<ol>\n<li>首先，在项目根目录下，新建文件 <code class=\"language-text\">CMakeLists.txt</code>;</li>\n<li>其次，配置 <code class=\"language-text\">CMakeLists.txt</code>;</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cmake\"><pre class=\"language-cmake\"><code class=\"language-cmake\"><span class=\"token keyword\">project</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">add_executable</span><span class=\"token punctuation\">(</span>test test.cpp test1.cpp<span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"3\">\n<li>最后，在项目根目录下，创建 <code class=\"language-text\">build</code> 目录;</li>\n</ol>\n<h4>正式构建</h4>\n<ol>\n<li>进入到 <code class=\"language-text\">build</code> 目录下，执行以下命令生成 <code class=\"language-text\">Makefile</code> 文件：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">cd build\ncmake ..</code></pre></div>\n<ol start=\"2\">\n<li>执行 make 命令生成可执行文件：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">mingw32-make.exe</code></pre></div>\n<ol start=\"3\">\n<li>让 vscode 替你完成步骤 1 和 2，配置 <code class=\"language-text\">task.json</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n\t<span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"options\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}/build\"</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cmake\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cmake\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token string\">\"..\"</span>\n\t\t\t<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"make\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mingw32-make.exe\"</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token property\">\"dependsOn\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n\t\t\t\t<span class=\"token string\">\"cmake\"</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token string\">\"make\"</span>\n\t\t\t<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>配置调试 launch.json</h3>\n<p>配置参数比较多，大多数是 vscode 自动生成的，我们需要关注以下几个参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>program</td>\n<td>调试程序，因为这里通过 cmake 构建的，构建产物在 build 目录下</td>\n</tr>\n<tr>\n<td>miDebuggerPath</td>\n<td>degugger 调试工具路径，这里就是 gdb 的路径</td>\n</tr>\n<tr>\n<td>preLaunchTask</td>\n<td>调试前需要做的任务，这里配置的 <code class=\"language-text\">build</code> 就是对应 <code class=\"language-text\">task.json</code> 的 <code class=\"language-text\">tasks[2]</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"(gdb) 启动\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cppdbg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${fileDirname}\\\\build\\\\example.exe\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"stopAtEntry\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"environment\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"externalConsole\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"MIMode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gdb\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"miDebuggerPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\Program Files (x86)\\\\mingw-w64\\\\mingw32\\\\bin\\\\gdb.exe\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"setupCommands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"为 gdb 启用整齐打印\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"text\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-enable-pretty-printing\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"ignoreFailures\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>好了，vscode 的 c/c++ 的开发/调试环境就配置好了，又可以愉快的断点调试了 🥂。</p>","frontmatter":{"title":"在 windows 上配置 c/c++ 开发环境","date":"September 11, 2021","description":"了解 gcc/g++, gdb, make 和 cmake 这些名词的含义以及用处，并且基于 cmake 完成 vscode 的 c/c++ 开发调试环境的配置。"}},"previous":{"fields":{"slug":"/re-learning-series/intention/"},"frontmatter":{"title":"重学系列-意图"}},"next":null},"pageContext":{"id":"b18c730c-81a6-5b00-851b-9f203102f86f","previousPostId":"58774d13-5aa7-5772-80cd-b3a9a0aa4ff8","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}