{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/re-learning-series/algorithms/two-pointers-technique/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HelloCode"}},"markdownRemark":{"id":"554224b7-c09d-5c44-983f-4b30039e62eb","excerpt":"双指针（two-pointers…","html":"<p>双指针（two-pointers) 指的是在迭代对象的过程中，使用两个相同方向或者相反方向的指针进行扫描。在处理<strong>有序</strong>数组搜索问题中，简单且高效。</p>\n<h2>快慢指针</h2>\n<h2>对撞指针</h2>\n<p>定义两个指针：左指针 <code class=\"language-text\">left</code> 和右指针 <code class=\"language-text\">right</code>，且使左指针指向数组左侧，右指针指向数组右侧。在迭代过程中，左指针不断右移，右指针不断左移，直到发生<strong>碰撞</strong>。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 伪代码, 数组长度为 arraySize\nint left = 0;\nint right = arraySize;\n\nwhile(left &lt;= right) {\n  if (condition) {\n    left++;\n  }\n\n  if (another condition) {\n    right--;\n  }\n}</code></pre></div>\n<h3>有序数组的平方</h3>\n<p>给你一个按<strong>非递减顺序</strong>排序的整数数组 nums，返回<strong>每个数字的平方</strong>组成的新数组，要求也按<strong>非递减顺序</strong>排序。</p>\n<p><a href=\"https://leetcode-cn.com/problems/squares-of-a-sorted-array/\">有序数组的平方</a></p>\n<p>解决思路：</p>\n<ol>\n<li>关键字<strong>非递减顺序</strong>，说明数组是有序的，可以使用双指针；</li>\n<li>假设存在一个 k，使得：</li>\n</ol>\n<ul>\n<li>i &#x3C; k, nums[i] &#x3C; 0</li>\n<li>k &#x3C; i, 0 &#x3C; nums[i]</li>\n</ul>\n<ol start=\"3\">\n<li>平方后，可得：</li>\n</ol>\n<ul>\n<li>i &#x3C; k, nums 顺序性发生变化，平方后的数组为降序，↓</li>\n<li>k &#x3C; i, nums 顺序性不变，升序 ↑。</li>\n</ul>\n<ol start=\"4\">\n<li>令 left = 0, right = nums.length - 1，那么最大元素为 max(left, right)：</li>\n</ol>\n<ul>\n<li>若 left 更大，left 为剩余最大元素，left 指针所指向的元素填入 ans 数组，同时 left 指针右移</li>\n<li>若 right 更大，right 为剩余中最大元素，right 指针所指向的元素填入 ans 数组，同时 right 指针左移</li>\n<li>不断迭代，直至左右指针发生碰撞。</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sortedSquares</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> ans <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 结构数组</span>\n  <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// </span>\n  <span class=\"token keyword\">var</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> right <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      right<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nums<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      left<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"双指针","date":"September 20, 2021","description":null}},"previous":{"fields":{"slug":"/re-learning-series/data-structure/linear-list/"},"frontmatter":{"title":"线性表"}},"next":null},"pageContext":{"id":"554224b7-c09d-5c44-983f-4b30039e62eb","previousPostId":"c333d7b6-200b-5fb5-8c29-09b052fb11f3","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}