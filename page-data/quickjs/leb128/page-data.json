{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/quickjs/leb128/",
    "result": {"data":{"site":{"siteMetadata":{"title":"HelloCode"}},"markdownRemark":{"id":"6860959a-fa35-5e8d-8b47-53ec65e6b38c","excerpt":"LEB 128（Little Endian Base 128）是一种变长的整数压缩编码形式。它被应用于 DWARF debug file format，wasm 的整数字面量的二进制编码，以及 quickjs 的字节码中。 编码 每个 LEB128 编码值均由 1-5 个字节组成，共同表示一个 3…","html":"<p>LEB 128（Little Endian Base 128）是一种变长的整数压缩编码形式。它被应用于 <a href=\"https://en.wikipedia.org/wiki/DWARF\">DWARF</a> debug file format，wasm 的整数字面量的二进制编码，以及 quickjs 的字节码中。</p>\n<h2>编码</h2>\n<table border=\"1\">\n  <tr >\n    <td colspan=\"16\">双字节 LEB128 值的按位图</td>\n  </tr>\n  <tr>\n    <td colspan=\"8\">第一个字节</td>\n    <td colspan=\"8\">第二个字节</td>\n  </tr>\n  <tr>\n    <td>1</td>\n    <td>bit6</td>\n    <td>bit5</td>\n    <td>bit4</td>\n    <td>bit3</td>\n    <td>bit2</td>\n    <td>bit1</td>\n    <td>bit0</td>\n    <td>0</td>\n    <td>bit13</td>\n    <td>bit12</td>\n    <td>bit11</td>\n    <td>bit10</td>\n    <td>bit9</td>\n    <td>bit8</td>\n    <td>bit7</td>\n  </tr>\n</table>\n<p>每个 LEB128 编码值均由 1-5 个字节组成，共同表示一个 32 位的值。每个字节最高位是信息位，1 表示后续还有字节，0 表示结束；每个字节的剩余 7 位均为有效负荷，即第一个字节中有 7 个最低有效位，第二个字节中也是 7 个，依此类推。</p>\n<p>LEB128 有两种变体，分为有符号 leb128 和无符号 leb128 两种，两者编码和解码有所差别。</p>\n<h3>无符号 leb128</h3>\n<p>用 uleb128 编码，主要分为五步：</p>\n<ol>\n<li>二进制表示</li>\n<li>因为信息位是 7 的倍数，所以左侧补 0</li>\n<li>每 7 位分一组</li>\n<li>每组高位加标志位</li>\n<li>转为小端</li>\n</ol>\n<p>以 624485 为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MSB ------------------ LSB\n      10011000011101100101  step 1\n     010011000011101100101  step 2\n 0100110  0001110  1100101  step 3\n00100110 10001110 11100101  step 4\n    0x26     0x8E     0xE5  \n\n→ 0xE5 0x8E 0x26            step 5</code></pre></div>\n<h3>有符号 leb128</h3>\n<p>和 uleb128 的区别在于，在 step 2 和 step 3 之间，增加计算补码的过程：</p>\n<p>以 -123456 为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MSB ------------------ LSB\n         11110001001000000  123456 二进制表示\n     000011110001001000000  左侧补 0，使得 bit 位是 7 的倍数\n     111100001110110111111  （补码 step1）按位取反\n     111100001110111000000  （补码 step2）+1\n 1111000  0111011  1000000  每 7 位分一组\n01111000 10111011 11000000  每组高位加标志位\n    0x78     0xBB     0xC0  In hexadecimal\n\n→ 0xC0 0xBB 0x78            转为小端表示</code></pre></div>\n<h2>解码</h2>\n<p>解码其实就是编码的逆过程。</p>\n<h2>代码</h2>\n<p>代码逻辑是取自 <code class=\"language-text\">quickjs</code>，做了一些改动。</p>\n<h3>uleb128 encode</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">encode_leb128</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">uint8_t</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">uint32_t</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        a <span class=\"token operator\">=</span> v <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7f</span><span class=\"token punctuation\">;</span>\n        v <span class=\"token operator\">>>=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            buf<span class=\"token punctuation\">[</span>pos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a <span class=\"token operator\">|</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            buf<span class=\"token punctuation\">[</span>pos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>uleb128 decode</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get_leb128</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">uint32_t</span> <span class=\"token operator\">*</span>pval<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">uint8_t</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">uint8_t</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">uint32_t</span> v<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">;</span>\n    v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        a <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ptr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        v <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span>pval <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> ptr <span class=\"token operator\">-</span> buf<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">*</span>pval <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"LEB128 编码格式","date":"September 21, 2021","description":"讲述了 LEB128 编码是什么，其次介绍了编码和解码思路，最后提供了 c 版本的实现。"}},"previous":{"fields":{"slug":"/ds&algorithms/two-pointers-technique/"},"frontmatter":{"title":"双指针"}},"next":{"fields":{"slug":"/ds&algorithms/dynamic-programming/"},"frontmatter":{"title":"Dynamic Programming"}}},"pageContext":{"id":"6860959a-fa35-5e8d-8b47-53ec65e6b38c","previousPostId":"128bb5c1-a87a-54d5-9e45-07b7ea99a37d","nextPostId":"45f351a2-c6eb-50ba-b314-698fde757d95"}},
    "staticQueryHashes": ["2841359383","3257411868"]}